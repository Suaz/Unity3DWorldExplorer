//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Input/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""PlayerController"",
            ""id"": ""7f6a8d61-5672-4db3-92f4-e822117dd682"",
            ""actions"": [
                {
                    ""name"": ""MoveXAxis"",
                    ""type"": ""Button"",
                    ""id"": ""d8eddfd3-dde7-48a8-add5-73c8d75a8ae5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveZAxis"",
                    ""type"": ""Button"",
                    ""id"": ""fc3091ce-fa38-448d-a7fd-e6f217310f2b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""582a1890-9feb-4731-a495-ab5ae47780c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""6c0c2209-3e59-4165-81af-8d6e2306f598"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""28bca2ab-45a8-4b57-a944-82787e7722aa"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveXAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""48ef8430-631c-41ac-b839-603ea66f26c7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveXAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2b3cde6c-7a2d-4006-b949-bcdd00af8a56"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveXAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""46bc8cb8-5d5b-480b-9390-ebc8c0c56b58"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveXAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""18391bdd-be27-4ded-8b93-57c2517b88e5"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveXAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ac94a0b9-9518-40b5-a9da-17128b0fc591"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveXAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""3a4d3809-aef8-4c06-a708-8596ea8f31d4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveZAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""eda9e0a3-7545-467c-9b56-fe3a46462f8d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveZAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""48dd0454-f1a0-49bd-b397-5fc91c6afeb8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveZAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4f94860b-7c98-414f-ac23-134292b26156"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""842eee85-924a-482e-9f94-944778a65d22"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SceneController"",
            ""id"": ""eabc933f-e2eb-4044-b572-bd04b7068e2e"",
            ""actions"": [
                {
                    ""name"": ""Action1"",
                    ""type"": ""Button"",
                    ""id"": ""275c2542-44a4-4a97-99ef-3cd160af9a66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e6124288-d134-494a-8374-e673a2da3788"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerController
        m_PlayerController = asset.FindActionMap("PlayerController", throwIfNotFound: true);
        m_PlayerController_MoveXAxis = m_PlayerController.FindAction("MoveXAxis", throwIfNotFound: true);
        m_PlayerController_MoveZAxis = m_PlayerController.FindAction("MoveZAxis", throwIfNotFound: true);
        m_PlayerController_Jump = m_PlayerController.FindAction("Jump", throwIfNotFound: true);
        m_PlayerController_Throw = m_PlayerController.FindAction("Throw", throwIfNotFound: true);
        // SceneController
        m_SceneController = asset.FindActionMap("SceneController", throwIfNotFound: true);
        m_SceneController_Action1 = m_SceneController.FindAction("Action1", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerController
    private readonly InputActionMap m_PlayerController;
    private IPlayerControllerActions m_PlayerControllerActionsCallbackInterface;
    private readonly InputAction m_PlayerController_MoveXAxis;
    private readonly InputAction m_PlayerController_MoveZAxis;
    private readonly InputAction m_PlayerController_Jump;
    private readonly InputAction m_PlayerController_Throw;
    public struct PlayerControllerActions
    {
        private @Player m_Wrapper;
        public PlayerControllerActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveXAxis => m_Wrapper.m_PlayerController_MoveXAxis;
        public InputAction @MoveZAxis => m_Wrapper.m_PlayerController_MoveZAxis;
        public InputAction @Jump => m_Wrapper.m_PlayerController_Jump;
        public InputAction @Throw => m_Wrapper.m_PlayerController_Throw;
        public InputActionMap Get() { return m_Wrapper.m_PlayerController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControllerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControllerActions instance)
        {
            if (m_Wrapper.m_PlayerControllerActionsCallbackInterface != null)
            {
                @MoveXAxis.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMoveXAxis;
                @MoveXAxis.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMoveXAxis;
                @MoveXAxis.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMoveXAxis;
                @MoveZAxis.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMoveZAxis;
                @MoveZAxis.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMoveZAxis;
                @MoveZAxis.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMoveZAxis;
                @Jump.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnJump;
                @Throw.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnThrow;
                @Throw.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnThrow;
                @Throw.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnThrow;
            }
            m_Wrapper.m_PlayerControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveXAxis.started += instance.OnMoveXAxis;
                @MoveXAxis.performed += instance.OnMoveXAxis;
                @MoveXAxis.canceled += instance.OnMoveXAxis;
                @MoveZAxis.started += instance.OnMoveZAxis;
                @MoveZAxis.performed += instance.OnMoveZAxis;
                @MoveZAxis.canceled += instance.OnMoveZAxis;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
            }
        }
    }
    public PlayerControllerActions @PlayerController => new PlayerControllerActions(this);

    // SceneController
    private readonly InputActionMap m_SceneController;
    private ISceneControllerActions m_SceneControllerActionsCallbackInterface;
    private readonly InputAction m_SceneController_Action1;
    public struct SceneControllerActions
    {
        private @Player m_Wrapper;
        public SceneControllerActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @Action1 => m_Wrapper.m_SceneController_Action1;
        public InputActionMap Get() { return m_Wrapper.m_SceneController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SceneControllerActions set) { return set.Get(); }
        public void SetCallbacks(ISceneControllerActions instance)
        {
            if (m_Wrapper.m_SceneControllerActionsCallbackInterface != null)
            {
                @Action1.started -= m_Wrapper.m_SceneControllerActionsCallbackInterface.OnAction1;
                @Action1.performed -= m_Wrapper.m_SceneControllerActionsCallbackInterface.OnAction1;
                @Action1.canceled -= m_Wrapper.m_SceneControllerActionsCallbackInterface.OnAction1;
            }
            m_Wrapper.m_SceneControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Action1.started += instance.OnAction1;
                @Action1.performed += instance.OnAction1;
                @Action1.canceled += instance.OnAction1;
            }
        }
    }
    public SceneControllerActions @SceneController => new SceneControllerActions(this);
    public interface IPlayerControllerActions
    {
        void OnMoveXAxis(InputAction.CallbackContext context);
        void OnMoveZAxis(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
    }
    public interface ISceneControllerActions
    {
        void OnAction1(InputAction.CallbackContext context);
    }
}
